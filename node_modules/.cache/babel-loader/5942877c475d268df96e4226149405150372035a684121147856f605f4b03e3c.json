{"ast":null,"code":"// Add the following import\nimport { getToken } from \"./users-service\";\nexport default async function sendRequest(url) {\n  let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"GET\";\n  let payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  // Fetch accepts an options object as the 2nd argument\n  // used to include a data payload, set headers, etc.\n  const options = {\n    method\n  };\n  if (payload) {\n    options.headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    options.body = JSON.stringify(payload);\n  }\n  // Add the below code\n  const token = getToken();\n  if (token) {\n    // Ensure the headers object exists\n    options.headers = options.headers || {};\n    // Add token to an Authorization header\n    // Prefacing with 'Bearer' is recommended in the HTTP specification\n    options.headers.Authorization = `Bearer ${token}`;\n  }\n  const res = await fetch(url, options);\n  // res.ok will be false if the status code set to 4xx in the controller action\n  if (res.ok) return res.json();\n  throw new Error(\"Bad Request\");\n}","map":{"version":3,"names":["getToken","sendRequest","url","method","arguments","length","undefined","payload","options","headers","body","JSON","stringify","token","Authorization","res","fetch","ok","json","Error"],"sources":["/Users/mindyt/Desktop/Practice/mern-infrastructure/src/utilities/send-request.js"],"sourcesContent":["// Add the following import\nimport { getToken } from \"./users-service\";\n\nexport default async function sendRequest(url, method = \"GET\", payload = null) {\n  // Fetch accepts an options object as the 2nd argument\n  // used to include a data payload, set headers, etc.\n  const options = { method };\n  if (payload) {\n    options.headers = { \"Content-Type\": \"application/json\" };\n    options.body = JSON.stringify(payload);\n  }\n  // Add the below code\n  const token = getToken();\n  if (token) {\n    // Ensure the headers object exists\n    options.headers = options.headers || {};\n    // Add token to an Authorization header\n    // Prefacing with 'Bearer' is recommended in the HTTP specification\n    options.headers.Authorization = `Bearer ${token}`;\n  }\n  const res = await fetch(url, options);\n  // res.ok will be false if the status code set to 4xx in the controller action\n  if (res.ok) return res.json();\n  throw new Error(\"Bad Request\");\n}\n"],"mappings":"AAAA;AACA,SAASA,QAAQ,QAAQ,iBAAiB;AAE1C,eAAe,eAAeC,WAAWA,CAACC,GAAG,EAAkC;EAAA,IAAhCC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAAA,IAAEG,OAAO,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAC3E;EACA;EACA,MAAMI,OAAO,GAAG;IAAEL;EAAO,CAAC;EAC1B,IAAII,OAAO,EAAE;IACXC,OAAO,CAACC,OAAO,GAAG;MAAE,cAAc,EAAE;IAAmB,CAAC;IACxDD,OAAO,CAACE,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACL,OAAO,CAAC;EACxC;EACA;EACA,MAAMM,KAAK,GAAGb,QAAQ,CAAC,CAAC;EACxB,IAAIa,KAAK,EAAE;IACT;IACAL,OAAO,CAACC,OAAO,GAAGD,OAAO,CAACC,OAAO,IAAI,CAAC,CAAC;IACvC;IACA;IACAD,OAAO,CAACC,OAAO,CAACK,aAAa,GAAI,UAASD,KAAM,EAAC;EACnD;EACA,MAAME,GAAG,GAAG,MAAMC,KAAK,CAACd,GAAG,EAAEM,OAAO,CAAC;EACrC;EACA,IAAIO,GAAG,CAACE,EAAE,EAAE,OAAOF,GAAG,CAACG,IAAI,CAAC,CAAC;EAC7B,MAAM,IAAIC,KAAK,CAAC,aAAa,CAAC;AAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}