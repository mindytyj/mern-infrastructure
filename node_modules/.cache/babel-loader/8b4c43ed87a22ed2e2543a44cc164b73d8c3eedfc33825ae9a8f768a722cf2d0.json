{"ast":null,"code":"// This is the base path of the Express route we'll define\nconst BASE_URL = \"/api/users\";\nexport async function SignUp(userData) {\n  // Fetch uses an options object as a second arg to make requests\n  // other than basic GET requests, include data, headers, etc.\n  const res = await fetch(BASE_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    // Fetch requires data payloads to be stringified\n    // and assigned to a body property on the options object\n    body: JSON.stringify(userData)\n  });\n\n  // Check if request was successful\n  if (res.ok) {\n    // res.json() will resolve to the JWT\n    return res.json();\n  } else {\n    throw new Error(\"Invalid Sign Up\");\n  }\n}\n_c = SignUp;\nexport async function Login(credentials) {\n  // Fetch uses an options object as a second arg to make requests\n  // other than basic GET requests, include data, headers, etc.\n  const res = await fetch(BASE_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    // Fetch requires data payloads to be stringified\n    // and assigned to a body property on the options object\n    body: JSON.stringify(credentials)\n  });\n\n  // Check if request was successful\n  if (res.ok) {\n    // res.json() will resolve to the JWT\n    return res.json();\n  } else {\n    throw new Error(\"Invalid Sign Up\");\n  }\n}\n_c2 = Login;\nvar _c, _c2;\n$RefreshReg$(_c, \"SignUp\");\n$RefreshReg$(_c2, \"Login\");","map":{"version":3,"names":["BASE_URL","SignUp","userData","res","fetch","method","headers","body","JSON","stringify","ok","json","Error","_c","Login","credentials","_c2","$RefreshReg$"],"sources":["/Users/mindyt/Desktop/Practice/mern-infrastructure/src/utilities/users-api.js"],"sourcesContent":["// This is the base path of the Express route we'll define\nconst BASE_URL = \"/api/users\";\n\nexport async function SignUp(userData) {\n  // Fetch uses an options object as a second arg to make requests\n  // other than basic GET requests, include data, headers, etc.\n  const res = await fetch(BASE_URL, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    // Fetch requires data payloads to be stringified\n    // and assigned to a body property on the options object\n    body: JSON.stringify(userData),\n  });\n\n  // Check if request was successful\n  if (res.ok) {\n    // res.json() will resolve to the JWT\n    return res.json();\n  } else {\n    throw new Error(\"Invalid Sign Up\");\n  }\n}\n\nexport async function Login(credentials) {\n  // Fetch uses an options object as a second arg to make requests\n  // other than basic GET requests, include data, headers, etc.\n  const res = await fetch(BASE_URL, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    // Fetch requires data payloads to be stringified\n    // and assigned to a body property on the options object\n    body: JSON.stringify(credentials),\n  });\n\n  // Check if request was successful\n  if (res.ok) {\n    // res.json() will resolve to the JWT\n    return res.json();\n  } else {\n    throw new Error(\"Invalid Sign Up\");\n  }\n}\n"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,YAAY;AAE7B,OAAO,eAAeC,MAAMA,CAACC,QAAQ,EAAE;EACrC;EACA;EACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACJ,QAAQ,EAAE;IAChCK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/C;IACA;IACAC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;EAC/B,CAAC,CAAC;;EAEF;EACA,IAAIC,GAAG,CAACO,EAAE,EAAE;IACV;IACA,OAAOP,GAAG,CAACQ,IAAI,CAAC,CAAC;EACnB,CAAC,MAAM;IACL,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACpC;AACF;AAACC,EAAA,GAlBqBZ,MAAM;AAoB5B,OAAO,eAAea,KAAKA,CAACC,WAAW,EAAE;EACvC;EACA;EACA,MAAMZ,GAAG,GAAG,MAAMC,KAAK,CAACJ,QAAQ,EAAE;IAChCK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/C;IACA;IACAC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACM,WAAW;EAClC,CAAC,CAAC;;EAEF;EACA,IAAIZ,GAAG,CAACO,EAAE,EAAE;IACV;IACA,OAAOP,GAAG,CAACQ,IAAI,CAAC,CAAC;EACnB,CAAC,MAAM;IACL,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACpC;AACF;AAACI,GAAA,GAlBqBF,KAAK;AAAA,IAAAD,EAAA,EAAAG,GAAA;AAAAC,YAAA,CAAAJ,EAAA;AAAAI,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}