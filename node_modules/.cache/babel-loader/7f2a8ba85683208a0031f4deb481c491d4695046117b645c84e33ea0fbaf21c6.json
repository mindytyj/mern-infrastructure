{"ast":null,"code":"// This is the base path of the Express route we'll define\nconst BASE_URL = \"/api/users\";\nexport async function SignUp(userData) {\n  // Fetch uses an options object as a second arg to make requests\n  // other than basic GET requests, include data, headers, etc.\n  const res = await fetch(BASE_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    // Fetch requires data payloads to be stringified\n    // and assigned to a body property on the options object\n    body: JSON.stringify(userData)\n  });\n\n  // Check if request was successful\n  if (res.ok) {\n    // res.json() will resolve to the JWT\n    return res.json();\n  } else {\n    throw new Error(\"Invalid Sign Up\");\n  }\n}\n_c = SignUp;\nexport async function login(req, res) {\n  try {\n    const user = await User.findOne({\n      email: req.body.email\n    });\n    if (!user) throw new Error();\n    const match = await bcrypt.compare(req.body.password, user.password);\n    if (!match) throw new Error();\n    res.json(createJWT(user));\n  } catch {\n    res.status(400).json(\"Bad Credentials\");\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"SignUp\");","map":{"version":3,"names":["BASE_URL","SignUp","userData","res","fetch","method","headers","body","JSON","stringify","ok","json","Error","_c","login","req","user","User","findOne","email","match","bcrypt","compare","password","createJWT","status","$RefreshReg$"],"sources":["/Users/mindyt/Desktop/Practice/mern-infrastructure/src/utilities/users-api.js"],"sourcesContent":["// This is the base path of the Express route we'll define\nconst BASE_URL = \"/api/users\";\n\nexport async function SignUp(userData) {\n  // Fetch uses an options object as a second arg to make requests\n  // other than basic GET requests, include data, headers, etc.\n  const res = await fetch(BASE_URL, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    // Fetch requires data payloads to be stringified\n    // and assigned to a body property on the options object\n    body: JSON.stringify(userData),\n  });\n\n  // Check if request was successful\n  if (res.ok) {\n    // res.json() will resolve to the JWT\n    return res.json();\n  } else {\n    throw new Error(\"Invalid Sign Up\");\n  }\n}\n\nexport async function login(req, res) {\n  try {\n    const user = await User.findOne({ email: req.body.email });\n    if (!user) throw new Error();\n    const match = await bcrypt.compare(req.body.password, user.password);\n    if (!match) throw new Error();\n    res.json(createJWT(user));\n  } catch {\n    res.status(400).json(\"Bad Credentials\");\n  }\n}\n"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,YAAY;AAE7B,OAAO,eAAeC,MAAMA,CAACC,QAAQ,EAAE;EACrC;EACA;EACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACJ,QAAQ,EAAE;IAChCK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/C;IACA;IACAC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;EAC/B,CAAC,CAAC;;EAEF;EACA,IAAIC,GAAG,CAACO,EAAE,EAAE;IACV;IACA,OAAOP,GAAG,CAACQ,IAAI,CAAC,CAAC;EACnB,CAAC,MAAM;IACL,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACpC;AACF;AAACC,EAAA,GAlBqBZ,MAAM;AAoB5B,OAAO,eAAea,KAAKA,CAACC,GAAG,EAAEZ,GAAG,EAAE;EACpC,IAAI;IACF,MAAMa,IAAI,GAAG,MAAMC,IAAI,CAACC,OAAO,CAAC;MAAEC,KAAK,EAAEJ,GAAG,CAACR,IAAI,CAACY;IAAM,CAAC,CAAC;IAC1D,IAAI,CAACH,IAAI,EAAE,MAAM,IAAIJ,KAAK,CAAC,CAAC;IAC5B,MAAMQ,KAAK,GAAG,MAAMC,MAAM,CAACC,OAAO,CAACP,GAAG,CAACR,IAAI,CAACgB,QAAQ,EAAEP,IAAI,CAACO,QAAQ,CAAC;IACpE,IAAI,CAACH,KAAK,EAAE,MAAM,IAAIR,KAAK,CAAC,CAAC;IAC7BT,GAAG,CAACQ,IAAI,CAACa,SAAS,CAACR,IAAI,CAAC,CAAC;EAC3B,CAAC,CAAC,MAAM;IACNb,GAAG,CAACsB,MAAM,CAAC,GAAG,CAAC,CAACd,IAAI,CAAC,iBAAiB,CAAC;EACzC;AACF;AAAC,IAAAE,EAAA;AAAAa,YAAA,CAAAb,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}